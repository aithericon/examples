/* tslint:disable */
/* eslint-disable */
/**
 * Aithericon platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@aithericon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AgridosAclEntryResponse
 */
export interface AgridosAclEntryResponse {
    /**
     * 
     * @type {string}
     * @memberof AgridosAclEntryResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAclEntryResponse
     */
    'acl'?: string;
}
/**
 * 
 * @export
 * @interface AgridosAddNodeConnectionRequest
 */
export interface AgridosAddNodeConnectionRequest {
    /**
     * 
     * @type {AgridosConnection}
     * @memberof AgridosAddNodeConnectionRequest
     */
    'connection'?: AgridosConnection;
}
/**
 * 
 * @export
 * @interface AgridosAgent
 */
export interface AgridosAgent {
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'initCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'stepCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosAgent
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'owner'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AgridosAgent
     */
    'config'?: { [key: string]: string; };
    /**
     * 
     * @type {AgridosSysRequirements}
     * @memberof AgridosAgent
     */
    'sysReq'?: AgridosSysRequirements;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'log'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosAgent
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosAgent
     */
    'template'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'parentAgent'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAgent
     */
    'target'?: string;
    /**
     * 
     * @type {Array<AgridosFile>}
     * @memberof AgridosAgent
     */
    'files'?: Array<AgridosFile>;
    /**
     * 
     * @type {{ [key: string]: AgridosIntervalTask; }}
     * @memberof AgridosAgent
     */
    'intervalTasks'?: { [key: string]: AgridosIntervalTask; };
}
/**
 * 
 * @export
 * @interface AgridosApiKey
 */
export interface AgridosApiKey {
    /**
     * 
     * @type {string}
     * @memberof AgridosApiKey
     */
    'key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosApiKey
     */
    'isSuperuser'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosApiKey
     */
    'isStaff'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosApiKey
     */
    'created'?: string;
}
/**
 * 
 * @export
 * @interface AgridosApiMetrics
 */
export interface AgridosApiMetrics {
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesNew'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesReady'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesDone'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesQueued'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesFailed'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosApiMetrics
     */
    'nodesRunning'?: number;
}
/**
 * 
 * @export
 * @interface AgridosApp
 */
export interface AgridosApp {
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'buildFile'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'iconLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosApp
     */
    'repository'?: string;
}
/**
 * 
 * @export
 * @interface AgridosAttribute
 */
export interface AgridosAttribute {
    /**
     * 
     * @type {string}
     * @memberof AgridosAttribute
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAttribute
     */
    'dataType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosAttribute
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface AgridosBatchCreateFilesResponse
 */
export interface AgridosBatchCreateFilesResponse {
    /**
     * 
     * @type {Array<AgridosFile>}
     * @memberof AgridosBatchCreateFilesResponse
     */
    'files'?: Array<AgridosFile>;
}
/**
 * 
 * @export
 * @interface AgridosBatchCreateNodesRequest
 */
export interface AgridosBatchCreateNodesRequest {
    /**
     * 
     * @type {string}
     * @memberof AgridosBatchCreateNodesRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosBatchCreateNodesRequest
     */
    'nodes'?: Array<AgridosNode>;
}
/**
 * 
 * @export
 * @interface AgridosBatchCreateNodesResponse
 */
export interface AgridosBatchCreateNodesResponse {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosBatchCreateNodesResponse
     */
    'nodes'?: Array<AgridosNode>;
}
/**
 * 
 * @export
 * @interface AgridosChangedStatus
 */
export interface AgridosChangedStatus {
    /**
     * 
     * @type {string}
     * @memberof AgridosChangedStatus
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosChangedStatus
     */
    'oldStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosChangedStatus
     */
    'newStatus'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosChangedStatus
     */
    'ownerId'?: string;
}
/**
 * 
 * @export
 * @interface AgridosClient
 */
export interface AgridosClient {
    /**
     * 
     * @type {string}
     * @memberof AgridosClient
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosClient
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosClient
     */
    'uptime'?: string;
    /**
     * 
     * @type {AgridosState}
     * @memberof AgridosClient
     */
    'state'?: AgridosState;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosClient
     */
    'currentTasks'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosClient
     */
    'addr'?: string;
    /**
     * 
     * @type {AgridosSysInfo}
     * @memberof AgridosClient
     */
    'sysInfo'?: AgridosSysInfo;
    /**
     * 
     * @type {string}
     * @memberof AgridosClient
     */
    'created'?: string;
    /**
     * 
     * @type {AgridosEntity}
     * @memberof AgridosClient
     */
    'clientType'?: AgridosEntity;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AgridosClient
     */
    'meta'?: { [key: string]: string; };
}


/**
 * 
 * @export
 * @interface AgridosConnection
 */
export interface AgridosConnection {
    /**
     * 
     * @type {string}
     * @memberof AgridosConnection
     */
    'sourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosConnection
     */
    'sourceSocket'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosConnection
     */
    'targetId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosConnection
     */
    'targetSocket'?: string;
}
/**
 * 
 * @export
 * @interface AgridosCreateNodeClassRequest
 */
export interface AgridosCreateNodeClassRequest {
    /**
     * 
     * @type {string}
     * @memberof AgridosCreateNodeClassRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {AgridosNodeClass}
     * @memberof AgridosCreateNodeClassRequest
     */
    'nodeClass'?: AgridosNodeClass;
}
/**
 * 
 * @export
 * @interface AgridosCreateNodeRequest
 */
export interface AgridosCreateNodeRequest {
    /**
     * 
     * @type {string}
     * @memberof AgridosCreateNodeRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosCreateNodeRequest
     */
    'node'?: AgridosNode;
}
/**
 * 
 * @export
 * @interface AgridosCreateProjectRequest
 */
export interface AgridosCreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof AgridosCreateProjectRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {AgridosProject}
     * @memberof AgridosCreateProjectRequest
     */
    'project'?: AgridosProject;
}
/**
 * 
 * @export
 * @interface AgridosCreateSerieRequest
 */
export interface AgridosCreateSerieRequest {
    /**
     * 
     * @type {string}
     * @memberof AgridosCreateSerieRequest
     */
    'parent'?: string;
    /**
     * 
     * @type {AgridosSerie}
     * @memberof AgridosCreateSerieRequest
     */
    'serie'?: AgridosSerie;
}
/**
 * 
 * @export
 * @interface AgridosDatapath
 */
export interface AgridosDatapath {
    /**
     * 
     * @type {string}
     * @memberof AgridosDatapath
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosDatapath
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AgridosEntity = {
    Worker: 'WORKER',
    Master: 'MASTER',
    Storage: 'STORAGE',
    Auxiliary: 'AUXILIARY'
} as const;

export type AgridosEntity = typeof AgridosEntity[keyof typeof AgridosEntity];


/**
 * 
 * @export
 * @interface AgridosExecuteNodeRequest
 */
export interface AgridosExecuteNodeRequest {
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosExecuteNodeRequest
     */
    'node'?: AgridosNode;
}
/**
 * 
 * @export
 * @interface AgridosExecuteNodeResponse
 */
export interface AgridosExecuteNodeResponse {
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosExecuteNodeResponse
     */
    'Node'?: AgridosNode;
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosExecuteNodeResponse
     */
    'spawnedNodes'?: Array<AgridosNode>;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosExecuteNodeResponse
     */
    'accepted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosExecuteNodeResponse
     */
    'systemLog'?: string;
}
/**
 * 
 * @export
 * @interface AgridosFile
 */
export interface AgridosFile {
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'nodeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'modified'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'fileServer'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'compressedSize'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosFile
     */
    'compression'?: string;
}
/**
 * 
 * @export
 * @interface AgridosGetNodeChildrenResponse
 */
export interface AgridosGetNodeChildrenResponse {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosGetNodeChildrenResponse
     */
    'children'?: Array<AgridosNode>;
    /**
     * 
     * @type {string}
     * @memberof AgridosGetNodeChildrenResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosGetNodeFullResponse
 */
export interface AgridosGetNodeFullResponse {
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosGetNodeFullResponse
     */
    'node'?: AgridosNode;
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosGetNodeFullResponse
     */
    'parents'?: Array<AgridosNode>;
}
/**
 * 
 * @export
 * @interface AgridosGetNodeParentsResponse
 */
export interface AgridosGetNodeParentsResponse {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosGetNodeParentsResponse
     */
    'children'?: Array<AgridosNode>;
    /**
     * 
     * @type {string}
     * @memberof AgridosGetNodeParentsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosGpuInfo
 */
export interface AgridosGpuInfo {
    /**
     * 
     * @type {number}
     * @memberof AgridosGpuInfo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosGpuInfo
     */
    'model'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGpuInfo
     */
    'memMax'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosGpuInfo
     */
    'enforcedPowerLimit'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosGpuInfo
     */
    'blocked'?: boolean;
}
/**
 * 
 * @export
 * @interface AgridosGroup
 */
export interface AgridosGroup {
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosGroup
     */
    'acl'?: string;
}
/**
 * 
 * @export
 * @interface AgridosIntervalTask
 */
export interface AgridosIntervalTask {
    /**
     * 
     * @type {string}
     * @memberof AgridosIntervalTask
     */
    'interval'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosIntervalTask
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListAclGroupsResponse
 */
export interface AgridosListAclGroupsResponse {
    /**
     * 
     * @type {Array<AgridosGroup>}
     * @memberof AgridosListAclGroupsResponse
     */
    'groups'?: Array<AgridosGroup>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosListAclGroupsResponse
     */
    'acl'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosListAclGroupsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListAclUsersResponse
 */
export interface AgridosListAclUsersResponse {
    /**
     * 
     * @type {Array<AgridosUser>}
     * @memberof AgridosListAclUsersResponse
     */
    'users'?: Array<AgridosUser>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosListAclUsersResponse
     */
    'acl'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosListAclUsersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListAgentsResponse
 */
export interface AgridosListAgentsResponse {
    /**
     * 
     * @type {Array<AgridosAgent>}
     * @memberof AgridosListAgentsResponse
     */
    'Agents'?: Array<AgridosAgent>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListAgentsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListAppsResponse
 */
export interface AgridosListAppsResponse {
    /**
     * 
     * @type {Array<AgridosApp>}
     * @memberof AgridosListAppsResponse
     */
    'apps'?: Array<AgridosApp>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListAppsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListClientsResponse
 */
export interface AgridosListClientsResponse {
    /**
     * 
     * @type {Array<AgridosClient>}
     * @memberof AgridosListClientsResponse
     */
    'clients'?: Array<AgridosClient>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListClientsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListFilesResponse
 */
export interface AgridosListFilesResponse {
    /**
     * 
     * @type {Array<AgridosFile>}
     * @memberof AgridosListFilesResponse
     */
    'files'?: Array<AgridosFile>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListFilesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListGroupsResponse
 */
export interface AgridosListGroupsResponse {
    /**
     * 
     * @type {Array<AgridosGroup>}
     * @memberof AgridosListGroupsResponse
     */
    'groups'?: Array<AgridosGroup>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListGroupsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListLogsResponse
 */
export interface AgridosListLogsResponse {
    /**
     * 
     * @type {Array<AgridosLog>}
     * @memberof AgridosListLogsResponse
     */
    'logs'?: Array<AgridosLog>;
    /**
     * 
     * @type {string}
     * @memberof AgridosListLogsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListNodeChildrenResponse
 */
export interface AgridosListNodeChildrenResponse {
    /**
     * 
     * @type {Array<AgridosNodeChild>}
     * @memberof AgridosListNodeChildrenResponse
     */
    'children'?: Array<AgridosNodeChild>;
    /**
     * 
     * @type {string}
     * @memberof AgridosListNodeChildrenResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListNodeClassesResponse
 */
export interface AgridosListNodeClassesResponse {
    /**
     * 
     * @type {Array<AgridosNodeClass>}
     * @memberof AgridosListNodeClassesResponse
     */
    'nodeClasses'?: Array<AgridosNodeClass>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListNodeClassesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListNodeRunsResponse
 */
export interface AgridosListNodeRunsResponse {
    /**
     * 
     * @type {Array<AgridosNodeRun>}
     * @memberof AgridosListNodeRunsResponse
     */
    'nodeRuns'?: Array<AgridosNodeRun>;
}
/**
 * 
 * @export
 * @interface AgridosListNodesResponse
 */
export interface AgridosListNodesResponse {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosListNodesResponse
     */
    'nodes'?: Array<AgridosNode>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListNodesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListOrganizationsResponse
 */
export interface AgridosListOrganizationsResponse {
    /**
     * 
     * @type {Array<AgridosOrganization>}
     * @memberof AgridosListOrganizationsResponse
     */
    'organizations'?: Array<AgridosOrganization>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListOrganizationsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListProjectsResponse
 */
export interface AgridosListProjectsResponse {
    /**
     * 
     * @type {Array<AgridosProject>}
     * @memberof AgridosListProjectsResponse
     */
    'projects'?: Array<AgridosProject>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListProjectsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListReadyNodesResponse
 */
export interface AgridosListReadyNodesResponse {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosListReadyNodesResponse
     */
    'nodes'?: Array<AgridosNode>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListReadyNodesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListRemovedFilesResponse
 */
export interface AgridosListRemovedFilesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosListRemovedFilesResponse
     */
    'fileIds'?: Array<string>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListRemovedFilesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListSeriesResponse
 */
export interface AgridosListSeriesResponse {
    /**
     * 
     * @type {Array<AgridosSerie>}
     * @memberof AgridosListSeriesResponse
     */
    'series'?: Array<AgridosSerie>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListSeriesResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosListUsersResponse
 */
export interface AgridosListUsersResponse {
    /**
     * 
     * @type {Array<AgridosUser>}
     * @memberof AgridosListUsersResponse
     */
    'users'?: Array<AgridosUser>;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results in the list.
     * @type {string}
     * @memberof AgridosListUsersResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface AgridosLog
 */
export interface AgridosLog {
    /**
     * 
     * @type {string}
     * @memberof AgridosLog
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosLog
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosLog
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosLog
     */
    'log'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AgridosLogLevel = {
    Info: 'INFO',
    Warning: 'WARNING',
    Trace: 'TRACE',
    Error: 'ERROR',
    Debug: 'DEBUG'
} as const;

export type AgridosLogLevel = typeof AgridosLogLevel[keyof typeof AgridosLogLevel];


/**
 * 
 * @export
 * @interface AgridosLoginResponse
 */
export interface AgridosLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof AgridosLoginResponse
     */
    'authToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosLoginResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AgridosNode
 */
export interface AgridosNode {
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'classId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'runtime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'log'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'dataPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'client'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'status'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosNode
     */
    'root'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'serieId'?: string;
    /**
     * 
     * @type {Array<AgridosConnection>}
     * @memberof AgridosNode
     */
    'connections'?: Array<AgridosConnection>;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'created'?: string;
    /**
     * 
     * @type {Array<AgridosFile>}
     * @memberof AgridosNode
     */
    'files'?: Array<AgridosFile>;
    /**
     * 
     * @type {AgridosSysRequirements}
     * @memberof AgridosNode
     */
    'sysReq'?: AgridosSysRequirements;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'nodeType'?: string;
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosNode
     */
    'inputs'?: { [key: string]: AgridosAttribute; };
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosNode
     */
    'outputs'?: { [key: string]: AgridosAttribute; };
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'target'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosNode
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'acl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'author'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosNode
     */
    'runs'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'queued'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'allocated'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNode
     */
    'descriptionUser'?: string;
    /**
     * 
     * @type {AgridosNodeLayout}
     * @memberof AgridosNode
     */
    'nodeLayout'?: AgridosNodeLayout;
}
/**
 * 
 * @export
 * @interface AgridosNodeChild
 */
export interface AgridosNodeChild {
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosNodeChild
     */
    'node'?: AgridosNode;
    /**
     * 
     * @type {AgridosNodeGroup}
     * @memberof AgridosNodeChild
     */
    'nodeGroup'?: AgridosNodeGroup;
}
/**
 * 
 * @export
 * @interface AgridosNodeClass
 */
export interface AgridosNodeClass {
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'nodeType'?: string;
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosNodeClass
     */
    'inputs'?: { [key: string]: AgridosAttribute; };
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosNodeClass
     */
    'outputs'?: { [key: string]: AgridosAttribute; };
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosNodeClass
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'path'?: string;
    /**
     * 
     * @type {AgridosSysRequirements}
     * @memberof AgridosNodeClass
     */
    'sysReq'?: AgridosSysRequirements;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeClass
     */
    'acl'?: string;
}
/**
 * 
 * @export
 * @interface AgridosNodeGroup
 */
export interface AgridosNodeGroup {
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosNodeGroup
     */
    'nodes'?: Array<AgridosNode>;
}
/**
 * 
 * @export
 * @interface AgridosNodeLayout
 */
export interface AgridosNodeLayout {
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeLayout
     */
    'id'?: string;
    /**
     * 
     * @type {AgridosPoint2DFloat}
     * @memberof AgridosNodeLayout
     */
    'pos'?: AgridosPoint2DFloat;
    /**
     * 
     * @type {AgridosPoint2DFloat}
     * @memberof AgridosNodeLayout
     */
    'size'?: AgridosPoint2DFloat;
    /**
     * 
     * @type {number}
     * @memberof AgridosNodeLayout
     */
    'zIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeLayout
     */
    'bgColor'?: string;
}
/**
 * 
 * @export
 * @interface AgridosNodeRun
 */
export interface AgridosNodeRun {
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'nodeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'nodeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'runtime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'status'?: string;
    /**
     * 
     * @type {AgridosSysRequirements}
     * @memberof AgridosNodeRun
     */
    'sysReq'?: AgridosSysRequirements;
    /**
     * 
     * @type {number}
     * @memberof AgridosNodeRun
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'generatedFileSize'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'flowId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosNodeRun
     */
    'computeUnitCosts'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'queued'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosNodeRun
     */
    'allocated'?: string;
}
/**
 * 
 * @export
 * @interface AgridosOrganization
 */
export interface AgridosOrganization {
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'acl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'deploymentType'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'computeBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'workstationLicenses'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'userLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'alertComputeBudget'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'archiveCapacity'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'storageCapacity'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'reservedComputeBudget'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosOrganization
     */
    'usedComputeBudget'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'storageUsage'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'storageUsageCompressed'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'archiveUsage'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'archiveUsageCompressed'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'zipCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosOrganization
     */
    'vatNumber'?: string;
}
/**
 * 
 * @export
 * @interface AgridosPoint2DFloat
 */
export interface AgridosPoint2DFloat {
    /**
     * 
     * @type {number}
     * @memberof AgridosPoint2DFloat
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosPoint2DFloat
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface AgridosProject
 */
export interface AgridosProject {
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'created'?: string;
    /**
     * 
     * @type {Array<AgridosSerie>}
     * @memberof AgridosProject
     */
    'series'?: Array<AgridosSerie>;
    /**
     * 
     * @type {number}
     * @memberof AgridosProject
     */
    'priority'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosProject
     */
    'archived'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosProject
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosProject
     */
    'acl'?: string;
}
/**
 * 
 * @export
 * @interface AgridosRegisterUserResponse
 */
export interface AgridosRegisterUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AgridosRegisterUserResponse
     */
    'isRegistered'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosRegisterUserResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AgridosRemoveNodeConnectionRequest
 */
export interface AgridosRemoveNodeConnectionRequest {
    /**
     * 
     * @type {AgridosConnection}
     * @memberof AgridosRemoveNodeConnectionRequest
     */
    'connection'?: AgridosConnection;
}
/**
 * 
 * @export
 * @interface AgridosResolveDatapathResponse
 */
export interface AgridosResolveDatapathResponse {
    /**
     * 
     * @type {Array<AgridosDatapath>}
     * @memberof AgridosResolveDatapathResponse
     */
    'entries'?: Array<AgridosDatapath>;
}
/**
 * 
 * @export
 * @interface AgridosSerie
 */
export interface AgridosSerie {
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'start'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'end'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'runtime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'log'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'created'?: string;
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosSerie
     */
    'nodes'?: Array<AgridosNode>;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'staticStorage'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosSerie
     */
    'quality'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'projectId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosSerie
     */
    'priority'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosSerie
     */
    'archived'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosSerie
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AgridosSerie
     */
    'acl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosSerie
     */
    'notify'?: boolean;
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosSerie
     */
    'inputs'?: { [key: string]: AgridosAttribute; };
    /**
     * 
     * @type {{ [key: string]: AgridosAttribute; }}
     * @memberof AgridosSerie
     */
    'outputs'?: { [key: string]: AgridosAttribute; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AgridosState = {
    Ready: 'READY',
    Busy: 'BUSY',
    Offline: 'OFFLINE',
    Halted: 'HALTED',
    Unknown: 'UNKNOWN'
} as const;

export type AgridosState = typeof AgridosState[keyof typeof AgridosState];


/**
 * 
 * @export
 * @interface AgridosSysInfo
 */
export interface AgridosSysInfo {
    /**
     * 
     * @type {string}
     * @memberof AgridosSysInfo
     */
    'memMax'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSysInfo
     */
    'cpuModel'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysInfo
     */
    'cpuCores'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosSysInfo
     */
    'cpuFreq'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosSysInfo
     */
    'diskCapacity'?: string;
    /**
     * 
     * @type {Array<AgridosGpuInfo>}
     * @memberof AgridosSysInfo
     */
    'gpuInfo'?: Array<AgridosGpuInfo>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosSysInfo
     */
    'software'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AgridosSysRequirements
 */
export interface AgridosSysRequirements {
    /**
     * 
     * @type {boolean}
     * @memberof AgridosSysRequirements
     */
    'blockGpu'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosSysRequirements
     */
    'blockCpu'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysRequirements
     */
    'memReq'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysRequirements
     */
    'vmemReq'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysRequirements
     */
    'diskReq'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysRequirements
     */
    'cpuReq'?: number;
    /**
     * 
     * @type {number}
     * @memberof AgridosSysRequirements
     */
    'cores'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosSysRequirements
     */
    'software'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AgridosSysRequirements
     */
    'devices'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AgridosTemplateSerieResponse
 */
export interface AgridosTemplateSerieResponse {
    /**
     * 
     * @type {AgridosSerie}
     * @memberof AgridosTemplateSerieResponse
     */
    'newSerie'?: AgridosSerie;
    /**
     * 
     * @type {Array<AgridosNode>}
     * @memberof AgridosTemplateSerieResponse
     */
    'newNodes'?: Array<AgridosNode>;
}
/**
 * 
 * @export
 * @interface AgridosUpdateNodeClassRequest
 */
export interface AgridosUpdateNodeClassRequest {
    /**
     * 
     * @type {AgridosNodeClass}
     * @memberof AgridosUpdateNodeClassRequest
     */
    'nodeClass'?: AgridosNodeClass;
}
/**
 * 
 * @export
 * @interface AgridosUpdateNodeRequest
 */
export interface AgridosUpdateNodeRequest {
    /**
     * 
     * @type {AgridosNode}
     * @memberof AgridosUpdateNodeRequest
     */
    'node'?: AgridosNode;
}
/**
 * 
 * @export
 * @interface AgridosUpdateProjectRequest
 */
export interface AgridosUpdateProjectRequest {
    /**
     * 
     * @type {AgridosProject}
     * @memberof AgridosUpdateProjectRequest
     */
    'project'?: AgridosProject;
}
/**
 * 
 * @export
 * @interface AgridosUpdateSerieRequest
 */
export interface AgridosUpdateSerieRequest {
    /**
     * 
     * @type {AgridosSerie}
     * @memberof AgridosUpdateSerieRequest
     */
    'serie'?: AgridosSerie;
}
/**
 * 
 * @export
 * @interface AgridosUser
 */
export interface AgridosUser {
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'lastLogin'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosUser
     */
    'isSuperuser'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosUser
     */
    'isStaff'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AgridosUser
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'created'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof AgridosUser
     */
    'favorites'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'apiKey'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosUser
     */
    'computeBudget'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'storageCapacity'?: string;
    /**
     * 
     * @type {number}
     * @memberof AgridosUser
     */
    'computeUnitUsage'?: number;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'storageUsage'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgridosUser
     */
    'storageUsageCompressed'?: string;
}
/**
 * 
 * @export
 * @interface AgridosValidateResponse
 */
export interface AgridosValidateResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AgridosValidateResponse
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AgridosValidateResponse
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface StreamResultOfAgridosChangedStatus
 */
export interface StreamResultOfAgridosChangedStatus {
    /**
     * 
     * @type {AgridosChangedStatus}
     * @memberof StreamResultOfAgridosChangedStatus
     */
    'result'?: AgridosChangedStatus;
    /**
     * 
     * @type {RpcStatus}
     * @memberof StreamResultOfAgridosChangedStatus
     */
    'error'?: RpcStatus;
}

/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a file by id.
         * @summary Delete file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDeleteFile', 'id', id)
            const localVarPath = `/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a file by id.
         * @summary Get file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetFile', 'id', id)
            const localVarPath = `/v1/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List files accessible by the token issuer.
         * @summary List files
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListFiles: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a file by id.
         * @summary Delete file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteFile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a file by id.
         * @summary Get file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetFile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List files accessible by the token issuer.
         * @summary List files
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListFiles(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListFiles(parent, pageSize, pageToken, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * Delete a file by id.
         * @summary Delete file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteFile(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiDeleteFile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a file by id.
         * @summary Get file
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetFile(id: string, options?: any): AxiosPromise<AgridosFile> {
            return localVarFp.apiGetFile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List files accessible by the token issuer.
         * @summary List files
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListFiles(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: any): AxiosPromise<AgridosListFilesResponse> {
            return localVarFp.apiListFiles(parent, pageSize, pageToken, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * Delete a file by id.
     * @summary Delete file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiDeleteFile(id: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiDeleteFile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a file by id.
     * @summary Get file
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiGetFile(id: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiGetFile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List files accessible by the token issuer.
     * @summary List files
     * @param {string} [parent] 
     * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public apiListFiles(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).apiListFiles(parent, pageSize, pageToken, filter, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FlowApi - axios parameter creator
 * @export
 */
export const FlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new flow owned by the token issuer
         * @summary Create flow
         * @param {AgridosCreateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateSerie: async (body: AgridosCreateSerieRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCreateSerie', 'body', body)
            const localVarPath = `/v1/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a flow by id
         * @summary Delete flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteSerie: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDeleteSerie', 'id', id)
            const localVarPath = `/v1/flows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a flow by id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Get flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSerie: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetSerie', 'id', id)
            const localVarPath = `/v1/flows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List flows accessible by the token issuer.
         * @summary List flows
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListSeries: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a copy of a flow. The copy is owned by the token issuer and assigned to the given project.
         * @summary Template flow
         * @param {string} [serieId] 
         * @param {string} [parent] 
         * @param {string} [newSerieName] 
         * @param {string} [author] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateSerie: async (serieId?: string, parent?: string, newSerieName?: string, author?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/flows/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serieId !== undefined) {
                localVarQueryParameter['serieId'] = serieId;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (newSerieName !== undefined) {
                localVarQueryParameter['newSerieName'] = newSerieName;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a flow with the given id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Update flow
         * @param {AgridosUpdateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSerie: async (body: AgridosUpdateSerieRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUpdateSerie', 'body', body)
            const localVarPath = `/v1/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowApi - functional programming interface
 * @export
 */
export const FlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlowApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new flow owned by the token issuer
         * @summary Create flow
         * @param {AgridosCreateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateSerie(body: AgridosCreateSerieRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosSerie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateSerie(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a flow by id
         * @summary Delete flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteSerie(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteSerie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a flow by id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Get flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetSerie(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosSerie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetSerie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List flows accessible by the token issuer.
         * @summary List flows
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListSeries(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListSeriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListSeries(parent, pageSize, pageToken, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a copy of a flow. The copy is owned by the token issuer and assigned to the given project.
         * @summary Template flow
         * @param {string} [serieId] 
         * @param {string} [parent] 
         * @param {string} [newSerieName] 
         * @param {string} [author] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTemplateSerie(serieId?: string, parent?: string, newSerieName?: string, author?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosTemplateSerieResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTemplateSerie(serieId, parent, newSerieName, author, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a flow with the given id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Update flow
         * @param {AgridosUpdateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateSerie(body: AgridosUpdateSerieRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosSerie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateSerie(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FlowApi - factory interface
 * @export
 */
export const FlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlowApiFp(configuration)
    return {
        /**
         * Create a new flow owned by the token issuer
         * @summary Create flow
         * @param {AgridosCreateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateSerie(body: AgridosCreateSerieRequest, options?: any): AxiosPromise<AgridosSerie> {
            return localVarFp.apiCreateSerie(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a flow by id
         * @summary Delete flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteSerie(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiDeleteSerie(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a flow by id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Get flow
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetSerie(id: string, options?: any): AxiosPromise<AgridosSerie> {
            return localVarFp.apiGetSerie(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List flows accessible by the token issuer.
         * @summary List flows
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListSeries(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: any): AxiosPromise<AgridosListSeriesResponse> {
            return localVarFp.apiListSeries(parent, pageSize, pageToken, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a copy of a flow. The copy is owned by the token issuer and assigned to the given project.
         * @summary Template flow
         * @param {string} [serieId] 
         * @param {string} [parent] 
         * @param {string} [newSerieName] 
         * @param {string} [author] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTemplateSerie(serieId?: string, parent?: string, newSerieName?: string, author?: string, options?: any): AxiosPromise<AgridosTemplateSerieResponse> {
            return localVarFp.apiTemplateSerie(serieId, parent, newSerieName, author, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a flow with the given id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
         * @summary Update flow
         * @param {AgridosUpdateSerieRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateSerie(body: AgridosUpdateSerieRequest, options?: any): AxiosPromise<AgridosSerie> {
            return localVarFp.apiUpdateSerie(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlowApi - object-oriented interface
 * @export
 * @class FlowApi
 * @extends {BaseAPI}
 */
export class FlowApi extends BaseAPI {
    /**
     * Create a new flow owned by the token issuer
     * @summary Create flow
     * @param {AgridosCreateSerieRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiCreateSerie(body: AgridosCreateSerieRequest, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiCreateSerie(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a flow by id
     * @summary Delete flow
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiDeleteSerie(id: string, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiDeleteSerie(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a flow by id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
     * @summary Get flow
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiGetSerie(id: string, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiGetSerie(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List flows accessible by the token issuer.
     * @summary List flows
     * @param {string} [parent] 
     * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiListSeries(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiListSeries(parent, pageSize, pageToken, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a copy of a flow. The copy is owned by the token issuer and assigned to the given project.
     * @summary Template flow
     * @param {string} [serieId] 
     * @param {string} [parent] 
     * @param {string} [newSerieName] 
     * @param {string} [author] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiTemplateSerie(serieId?: string, parent?: string, newSerieName?: string, author?: string, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiTemplateSerie(serieId, parent, newSerieName, author, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a flow with the given id. Return 404 if the flow does not exist. Returns 403 if the user is not allowed to access the flow.
     * @summary Update flow
     * @param {AgridosUpdateSerieRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowApi
     */
    public apiUpdateSerie(body: AgridosUpdateSerieRequest, options?: AxiosRequestConfig) {
        return FlowApiFp(this.configuration).apiUpdateSerie(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login and retrieve a token.
         * @summary Login
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogin: async (email?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a token.
         * @summary Validate token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiValidateToken: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiValidateToken', 'token', token)
            const localVarPath = `/v1/validate/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * Login and retrieve a token.
         * @summary Login
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLogin(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLogin(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validate a token.
         * @summary Validate token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiValidateToken(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosValidateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiValidateToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * Login and retrieve a token.
         * @summary Login
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLogin(email?: string, password?: string, options?: any): AxiosPromise<AgridosLoginResponse> {
            return localVarFp.apiLogin(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a token.
         * @summary Validate token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiValidateToken(token: string, options?: any): AxiosPromise<AgridosValidateResponse> {
            return localVarFp.apiValidateToken(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * Login and retrieve a token.
     * @summary Login
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLogin(email?: string, password?: string, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLogin(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate a token.
     * @summary Validate token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiValidateToken(token: string, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiValidateToken(token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Create node connection
         * @param {AgridosAddNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddNodeConnection: async (body: AgridosAddNodeConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiAddNodeConnection', 'body', body)
            const localVarPath = `/v1/nodes/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Batch create node
         * @param {AgridosBatchCreateNodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBatchCreateNodes: async (body: AgridosBatchCreateNodesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiBatchCreateNodes', 'body', body)
            const localVarPath = `/v1/nodes/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Create node
         * @param {AgridosCreateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateNode: async (body: AgridosCreateNodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCreateNode', 'body', body)
            const localVarPath = `/v1/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a node by id
         * @summary Delete node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteNode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDeleteNode', 'id', id)
            const localVarPath = `/v1/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new node under the given flow and execute it. The response will arrive once the node has finished executing.
         * @summary Execute node
         * @param {AgridosExecuteNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExecuteNode: async (body: AgridosExecuteNodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiExecuteNode', 'body', body)
            const localVarPath = `/v1/nodes/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetNode', 'id', id)
            const localVarPath = `/v1/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node children
         * @param {string} id 
         * @param {number} [depth] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeChildren: async (id: string, depth?: number, pageSize?: number, pageToken?: string, filter?: string, slim?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetNodeChildren', 'id', id)
            const localVarPath = `/v1/nodes/children/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (slim !== undefined) {
                localVarQueryParameter['slim'] = slim;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a node with its direct child nodes by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node full
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeFull: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetNodeFull', 'id', id)
            const localVarPath = `/v1/nodes/full/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a new node from a node class id. You will need to set the serie_id. The node is not spawned yet and has to be created via CreateNode call. Return 404 if the node class does not exist. Returns 403 if the user is not allowed to access the node class.
         * @summary Get node
         * @param {string} nodeClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInstantiateNodeFromClass: async (nodeClassId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeClassId' is not null or undefined
            assertParamExists('apiInstantiateNodeFromClass', 'nodeClassId', nodeClassId)
            const localVarPath = `/v1/instantiate_node_class/{nodeClassId}`
                .replace(`{${"nodeClassId"}}`, encodeURIComponent(String(nodeClassId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List active nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListActiveNodes: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (addLayout !== undefined) {
                localVarQueryParameter['addLayout'] = addLayout;
            }

            if (slim !== undefined) {
                localVarQueryParameter['slim'] = slim;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListNodes: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (addLayout !== undefined) {
                localVarQueryParameter['addLayout'] = addLayout;
            }

            if (slim !== undefined) {
                localVarQueryParameter['slim'] = slim;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Remove node connection
         * @param {AgridosRemoveNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemoveNodeConnection: async (body: AgridosRemoveNodeConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiRemoveNodeConnection', 'body', body)
            const localVarPath = `/v1/nodes/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Update node
         * @param {AgridosUpdateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNode: async (body: AgridosUpdateNodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUpdateNode', 'body', body)
            const localVarPath = `/v1/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a node status with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node. Only status READY, PAUSING and STOPPING can be set.
         * @summary Update node status
         * @param {string} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNodeStatus: async (id: string, status: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUpdateNodeStatus', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('apiUpdateNodeStatus', 'status', status)
            const localVarPath = `/v1/nodes/status/{id}/{status}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Watch the status of a node. The server will respond with streamed replies for every status change. The stream will close once the node has finished executing.
         * @summary Watch node status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWatchStatusChange: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiWatchStatusChange', 'id', id)
            const localVarPath = `/v1/nodes/watch/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Create node connection
         * @param {AgridosAddNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAddNodeConnection(body: AgridosAddNodeConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAddNodeConnection(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Batch create node
         * @param {AgridosBatchCreateNodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBatchCreateNodes(body: AgridosBatchCreateNodesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosBatchCreateNodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiBatchCreateNodes(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Create node
         * @param {AgridosCreateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateNode(body: AgridosCreateNodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateNode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a node by id
         * @summary Delete node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteNode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteNode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new node under the given flow and execute it. The response will arrive once the node has finished executing.
         * @summary Execute node
         * @param {AgridosExecuteNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExecuteNode(body: AgridosExecuteNodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosExecuteNodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExecuteNode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetNode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetNode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node children
         * @param {string} id 
         * @param {number} [depth] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetNodeChildren(id: string, depth?: number, pageSize?: number, pageToken?: string, filter?: string, slim?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosGetNodeChildrenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetNodeChildren(id, depth, pageSize, pageToken, filter, slim, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a node with its direct child nodes by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node full
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetNodeFull(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosGetNodeFullResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetNodeFull(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a new node from a node class id. You will need to set the serie_id. The node is not spawned yet and has to be created via CreateNode call. Return 404 if the node class does not exist. Returns 403 if the user is not allowed to access the node class.
         * @summary Get node
         * @param {string} nodeClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInstantiateNodeFromClass(nodeClassId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInstantiateNodeFromClass(nodeClassId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List active nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListActiveNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListNodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListActiveNodes(parent, pageSize, pageToken, filter, addLayout, slim, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListNodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListNodes(parent, pageSize, pageToken, filter, addLayout, slim, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Remove node connection
         * @param {AgridosRemoveNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRemoveNodeConnection(body: AgridosRemoveNodeConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRemoveNodeConnection(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Update node
         * @param {AgridosUpdateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateNode(body: AgridosUpdateNodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateNode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a node status with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node. Only status READY, PAUSING and STOPPING can be set.
         * @summary Update node status
         * @param {string} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateNodeStatus(id: string, status: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateNodeStatus(id, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Watch the status of a node. The server will respond with streamed replies for every status change. The stream will close once the node has finished executing.
         * @summary Watch node status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWatchStatusChange(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamResultOfAgridosChangedStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWatchStatusChange(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeApiFp(configuration)
    return {
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Create node connection
         * @param {AgridosAddNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAddNodeConnection(body: AgridosAddNodeConnectionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiAddNodeConnection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Batch create node
         * @param {AgridosBatchCreateNodesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBatchCreateNodes(body: AgridosBatchCreateNodesRequest, options?: any): AxiosPromise<AgridosBatchCreateNodesResponse> {
            return localVarFp.apiBatchCreateNodes(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new node owned by the token issuer
         * @summary Create node
         * @param {AgridosCreateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateNode(body: AgridosCreateNodeRequest, options?: any): AxiosPromise<AgridosNode> {
            return localVarFp.apiCreateNode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a node by id
         * @summary Delete node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteNode(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiDeleteNode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new node under the given flow and execute it. The response will arrive once the node has finished executing.
         * @summary Execute node
         * @param {AgridosExecuteNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExecuteNode(body: AgridosExecuteNodeRequest, options?: any): AxiosPromise<AgridosExecuteNodeResponse> {
            return localVarFp.apiExecuteNode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNode(id: string, options?: any): AxiosPromise<AgridosNode> {
            return localVarFp.apiGetNode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node children
         * @param {string} id 
         * @param {number} [depth] 
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeChildren(id: string, depth?: number, pageSize?: number, pageToken?: string, filter?: string, slim?: boolean, options?: any): AxiosPromise<AgridosGetNodeChildrenResponse> {
            return localVarFp.apiGetNodeChildren(id, depth, pageSize, pageToken, filter, slim, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a node with its direct child nodes by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Get node full
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeFull(id: string, options?: any): AxiosPromise<AgridosGetNodeFullResponse> {
            return localVarFp.apiGetNodeFull(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a new node from a node class id. You will need to set the serie_id. The node is not spawned yet and has to be created via CreateNode call. Return 404 if the node class does not exist. Returns 403 if the user is not allowed to access the node class.
         * @summary Get node
         * @param {string} nodeClassId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInstantiateNodeFromClass(nodeClassId: string, options?: any): AxiosPromise<AgridosNode> {
            return localVarFp.apiInstantiateNodeFromClass(nodeClassId, options).then((request) => request(axios, basePath));
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List active nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListActiveNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: any): AxiosPromise<AgridosListNodesResponse> {
            return localVarFp.apiListActiveNodes(parent, pageSize, pageToken, filter, addLayout, slim, options).then((request) => request(axios, basePath));
        },
        /**
         * List nodes accessible by the token issuer.
         * @summary List nodes
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {boolean} [addLayout] 
         * @param {boolean} [slim] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: any): AxiosPromise<AgridosListNodesResponse> {
            return localVarFp.apiListNodes(parent, pageSize, pageToken, filter, addLayout, slim, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Remove node connection
         * @param {AgridosRemoveNodeConnectionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRemoveNodeConnection(body: AgridosRemoveNodeConnectionRequest, options?: any): AxiosPromise<object> {
            return localVarFp.apiRemoveNodeConnection(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
         * @summary Update node
         * @param {AgridosUpdateNodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNode(body: AgridosUpdateNodeRequest, options?: any): AxiosPromise<AgridosNode> {
            return localVarFp.apiUpdateNode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a node status with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node. Only status READY, PAUSING and STOPPING can be set.
         * @summary Update node status
         * @param {string} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNodeStatus(id: string, status: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiUpdateNodeStatus(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Watch the status of a node. The server will respond with streamed replies for every status change. The stream will close once the node has finished executing.
         * @summary Watch node status
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWatchStatusChange(id: string, options?: any): AxiosPromise<StreamResultOfAgridosChangedStatus> {
            return localVarFp.apiWatchStatusChange(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI {
    /**
     * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Create node connection
     * @param {AgridosAddNodeConnectionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiAddNodeConnection(body: AgridosAddNodeConnectionRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiAddNodeConnection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new node owned by the token issuer
     * @summary Batch create node
     * @param {AgridosBatchCreateNodesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiBatchCreateNodes(body: AgridosBatchCreateNodesRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiBatchCreateNodes(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new node owned by the token issuer
     * @summary Create node
     * @param {AgridosCreateNodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiCreateNode(body: AgridosCreateNodeRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiCreateNode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a node by id
     * @summary Delete node
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiDeleteNode(id: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiDeleteNode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new node under the given flow and execute it. The response will arrive once the node has finished executing.
     * @summary Execute node
     * @param {AgridosExecuteNodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiExecuteNode(body: AgridosExecuteNodeRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiExecuteNode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Get node
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiGetNode(id: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiGetNode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a node by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Get node children
     * @param {string} id 
     * @param {number} [depth] 
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {boolean} [slim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiGetNodeChildren(id: string, depth?: number, pageSize?: number, pageToken?: string, filter?: string, slim?: boolean, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiGetNodeChildren(id, depth, pageSize, pageToken, filter, slim, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a node with its direct child nodes by id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Get node full
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiGetNodeFull(id: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiGetNodeFull(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a new node from a node class id. You will need to set the serie_id. The node is not spawned yet and has to be created via CreateNode call. Return 404 if the node class does not exist. Returns 403 if the user is not allowed to access the node class.
     * @summary Get node
     * @param {string} nodeClassId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiInstantiateNodeFromClass(nodeClassId: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiInstantiateNodeFromClass(nodeClassId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List nodes accessible by the token issuer.
     * @summary List active nodes
     * @param {string} [parent] 
     * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {boolean} [addLayout] 
     * @param {boolean} [slim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiListActiveNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiListActiveNodes(parent, pageSize, pageToken, filter, addLayout, slim, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List nodes accessible by the token issuer.
     * @summary List nodes
     * @param {string} [parent] 
     * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {boolean} [addLayout] 
     * @param {boolean} [slim] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiListNodes(parent?: string, pageSize?: number, pageToken?: string, filter?: string, addLayout?: boolean, slim?: boolean, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiListNodes(parent, pageSize, pageToken, filter, addLayout, slim, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Remove node connection
     * @param {AgridosRemoveNodeConnectionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiRemoveNodeConnection(body: AgridosRemoveNodeConnectionRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiRemoveNodeConnection(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a node with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node.
     * @summary Update node
     * @param {AgridosUpdateNodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiUpdateNode(body: AgridosUpdateNodeRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiUpdateNode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a node status with the given id. Return 404 if the node does not exist. Returns 403 if the user is not allowed to access the node. Only status READY, PAUSING and STOPPING can be set.
     * @summary Update node status
     * @param {string} id 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiUpdateNodeStatus(id: string, status: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiUpdateNodeStatus(id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Watch the status of a node. The server will respond with streamed replies for every status change. The stream will close once the node has finished executing.
     * @summary Watch node status
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiWatchStatusChange(id: string, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiWatchStatusChange(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodeClassApi - axios parameter creator
 * @export
 */
export const NodeClassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a node class.
         * @summary Create node class
         * @param {AgridosCreateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateNodeClass: async (body: AgridosCreateNodeClassRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCreateNodeClass', 'body', body)
            const localVarPath = `/v1/node-classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a node class by id.
         * @summary Delete node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteNodeClass: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDeleteNodeClass', 'id', id)
            const localVarPath = `/v1/node-classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a node class by id.
         * @summary Get node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeClass: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetNodeClass', 'id', id)
            const localVarPath = `/v1/node-classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List node classes accessible by the token issuer.
         * @summary List node classes
         * @param {string} [parent] This has to be revised according to how it will be represented in the UI
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {Array<string>} [mask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListNodeClasses: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, mask?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/node-classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (mask) {
                localVarQueryParameter['mask'] = mask;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a node class by id.
         * @summary Update node class
         * @param {AgridosUpdateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNodeClass: async (body: AgridosUpdateNodeClassRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUpdateNodeClass', 'body', body)
            const localVarPath = `/v1/node-classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeClassApi - functional programming interface
 * @export
 */
export const NodeClassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeClassApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a node class.
         * @summary Create node class
         * @param {AgridosCreateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateNodeClass(body: AgridosCreateNodeClassRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNodeClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateNodeClass(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a node class by id.
         * @summary Delete node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteNodeClass(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteNodeClass(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a node class by id.
         * @summary Get node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetNodeClass(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNodeClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetNodeClass(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List node classes accessible by the token issuer.
         * @summary List node classes
         * @param {string} [parent] This has to be revised according to how it will be represented in the UI
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {Array<string>} [mask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListNodeClasses(parent?: string, pageSize?: number, pageToken?: string, filter?: string, mask?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListNodeClassesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListNodeClasses(parent, pageSize, pageToken, filter, mask, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a node class by id.
         * @summary Update node class
         * @param {AgridosUpdateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateNodeClass(body: AgridosUpdateNodeClassRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosNodeClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateNodeClass(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NodeClassApi - factory interface
 * @export
 */
export const NodeClassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeClassApiFp(configuration)
    return {
        /**
         * Create a node class.
         * @summary Create node class
         * @param {AgridosCreateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateNodeClass(body: AgridosCreateNodeClassRequest, options?: any): AxiosPromise<AgridosNodeClass> {
            return localVarFp.apiCreateNodeClass(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a node class by id.
         * @summary Delete node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteNodeClass(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiDeleteNodeClass(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a node class by id.
         * @summary Get node class
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetNodeClass(id: string, options?: any): AxiosPromise<AgridosNodeClass> {
            return localVarFp.apiGetNodeClass(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List node classes accessible by the token issuer.
         * @summary List node classes
         * @param {string} [parent] This has to be revised according to how it will be represented in the UI
         * @param {number} [pageSize] 
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {Array<string>} [mask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListNodeClasses(parent?: string, pageSize?: number, pageToken?: string, filter?: string, mask?: Array<string>, options?: any): AxiosPromise<AgridosListNodeClassesResponse> {
            return localVarFp.apiListNodeClasses(parent, pageSize, pageToken, filter, mask, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a node class by id.
         * @summary Update node class
         * @param {AgridosUpdateNodeClassRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateNodeClass(body: AgridosUpdateNodeClassRequest, options?: any): AxiosPromise<AgridosNodeClass> {
            return localVarFp.apiUpdateNodeClass(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeClassApi - object-oriented interface
 * @export
 * @class NodeClassApi
 * @extends {BaseAPI}
 */
export class NodeClassApi extends BaseAPI {
    /**
     * Create a node class.
     * @summary Create node class
     * @param {AgridosCreateNodeClassRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeClassApi
     */
    public apiCreateNodeClass(body: AgridosCreateNodeClassRequest, options?: AxiosRequestConfig) {
        return NodeClassApiFp(this.configuration).apiCreateNodeClass(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a node class by id.
     * @summary Delete node class
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeClassApi
     */
    public apiDeleteNodeClass(id: string, options?: AxiosRequestConfig) {
        return NodeClassApiFp(this.configuration).apiDeleteNodeClass(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a node class by id.
     * @summary Get node class
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeClassApi
     */
    public apiGetNodeClass(id: string, options?: AxiosRequestConfig) {
        return NodeClassApiFp(this.configuration).apiGetNodeClass(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List node classes accessible by the token issuer.
     * @summary List node classes
     * @param {string} [parent] This has to be revised according to how it will be represented in the UI
     * @param {number} [pageSize] 
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {Array<string>} [mask] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeClassApi
     */
    public apiListNodeClasses(parent?: string, pageSize?: number, pageToken?: string, filter?: string, mask?: Array<string>, options?: AxiosRequestConfig) {
        return NodeClassApiFp(this.configuration).apiListNodeClasses(parent, pageSize, pageToken, filter, mask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a node class by id.
     * @summary Update node class
     * @param {AgridosUpdateNodeClassRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeClassApi
     */
    public apiUpdateNodeClass(body: AgridosUpdateNodeClassRequest, options?: AxiosRequestConfig) {
        return NodeClassApiFp(this.configuration).apiUpdateNodeClass(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new project owned by the token issuer
         * @summary Creates project
         * @param {AgridosCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateProject: async (body: AgridosCreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCreateProject', 'body', body)
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project by id
         * @summary Delete project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDeleteProject', 'id', id)
            const localVarPath = `/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a project by id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Get project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGetProject', 'id', id)
            const localVarPath = `/v1/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List projects accessible by the token issuer.
         * @summary List projects
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListProjects: async (parent?: string, pageSize?: number, pageToken?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a project with the given id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Update project
         * @param {AgridosUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateProject: async (body: AgridosUpdateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUpdateProject', 'body', body)
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new project owned by the token issuer
         * @summary Creates project
         * @param {AgridosCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCreateProject(body: AgridosCreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCreateProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a project by id
         * @summary Delete project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDeleteProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDeleteProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a project by id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Get project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List projects accessible by the token issuer.
         * @summary List projects
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiListProjects(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosListProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiListProjects(parent, pageSize, pageToken, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a project with the given id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Update project
         * @param {AgridosUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUpdateProject(body: AgridosUpdateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgridosProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUpdateProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Create a new project owned by the token issuer
         * @summary Creates project
         * @param {AgridosCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCreateProject(body: AgridosCreateProjectRequest, options?: any): AxiosPromise<AgridosProject> {
            return localVarFp.apiCreateProject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project by id
         * @summary Delete project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDeleteProject(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.apiDeleteProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a project by id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Get project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetProject(id: string, options?: any): AxiosPromise<AgridosProject> {
            return localVarFp.apiGetProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List projects accessible by the token issuer.
         * @summary List projects
         * @param {string} [parent] 
         * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
         * @param {string} [pageToken] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiListProjects(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: any): AxiosPromise<AgridosListProjectsResponse> {
            return localVarFp.apiListProjects(parent, pageSize, pageToken, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a project with the given id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
         * @summary Update project
         * @param {AgridosUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUpdateProject(body: AgridosUpdateProjectRequest, options?: any): AxiosPromise<AgridosProject> {
            return localVarFp.apiUpdateProject(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Create a new project owned by the token issuer
     * @summary Creates project
     * @param {AgridosCreateProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiCreateProject(body: AgridosCreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiCreateProject(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project by id
     * @summary Delete project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiDeleteProject(id: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiDeleteProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a project by id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
     * @summary Get project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiGetProject(id: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiGetProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List projects accessible by the token issuer.
     * @summary List projects
     * @param {string} [parent] 
     * @param {number} [pageSize] This has to be revised according to how it will be represented in the UI
     * @param {string} [pageToken] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiListProjects(parent?: string, pageSize?: number, pageToken?: string, filter?: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiListProjects(parent, pageSize, pageToken, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a project with the given id. Return 404 if the project does not exist. Returns 403 if the user is not allowed to access the project.
     * @summary Update project
     * @param {AgridosUpdateProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiUpdateProject(body: AgridosUpdateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiUpdateProject(body, options).then((request) => request(this.axios, this.basePath));
    }
}



